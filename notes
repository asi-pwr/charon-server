Halting
To immediately stop a request within a filter or route use:

halt
You can also specify the status when halting:

halt 410
Or the body:

halt 'this will be the body'
Or both:

halt 401, 'go away!'

Logging
In the request scope, the logger helper exposes a Logger instance:

get '/' do
  logger.info "loading data"
  # ...
end
This logger will automatically take your Rack handlerâ€™s logging settings into account. If logging is disabled, this method will return a dummy object, so you do not have to worry about it in your routes and filters.

Note that logging is only enabled for Sinatra::Application by default, so if you inherit from Sinatra::Base, you probably want to enable it yourself:

class MyApp < Sinatra::Base
  configure :production, :development do
    enable :logging
  end
end
To avoid any logging middleware to be set up, set the logging setting to nil. However, keep in mind that logger will in that case return nil. A common use case is when you want to set your own logger. Sinatra will use whatever it will find in env['rack.logger'].


Configuration
Run once, at startup, in any environment:

configure do
  # setting one option
  set :option, 'value'

  # setting multiple options
  set :a => 1, :b => 2

  # same as `set :option, true`
  enable :option

  # same as `set :option, false`
  disable :option

  # you can also have dynamic settings with blocks
  set(:css_dir) { File.join(views, 'css') }
end
Run only when the environment (RACK_ENV environment variable) is set to :production:

configure :production do
  ...
end
Run when the environment is set to either :production or :test:

configure :production, :test do
  ...
end
You can access those options via settings:

configure do
  set :foo, 'bar'
end

get '/' do
  settings.foo? # => true
  settings.foo  # => 'bar'
  ...
end


Configuring attack protection
Sinatra is using Rack::Protection to defend your application against common, opportunistic attacks. You can easily disable this behavior (which will open up your application to tons of common vulnerabilities):

disable :protection
To skip a single defense layer, set protection to an options hash:

set :protection, :except => :path_traversal
You can also hand in an array in order to disable a list of protections:

set :protection, :except => [:path_traversal, :session_hijacking]
By default, Sinatra will only set up session based protection if :sessions has been enabled. Sometimes you want to set up sessions on your own, though. In that case you can get it to set up session based protections by passing the :session option:

use Rack::Session::Pool
set :protection, :session => true

